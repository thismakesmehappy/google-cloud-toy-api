name: Deploy to Cloud Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  TERRAFORM_VERSION: '1.7.0'
  REGISTRY: 'gcr.io'

jobs:
  # Run tests and linting on all PRs and pushes
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'google-cloud-toy-api/package-lock.json'

      - name: Install dependencies
        working-directory: ./google-cloud-toy-api
        run: npm ci

      - name: Run linter
        working-directory: ./google-cloud-toy-api
        run: npm run lint || echo "No lint script configured"

      - name: Run type check
        working-directory: ./google-cloud-toy-api
        run: npm run type-check

      - name: Run tests
        working-directory: ./google-cloud-toy-api
        run: npm test

      - name: Build project
        working-directory: ./google-cloud-toy-api
        run: npm run build

  # Build and push Docker image
  build-image:
    if: github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_DEV }}

      - name: Configure Docker to use gcloud as credential helper
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        id: image
        working-directory: ./google-cloud-toy-api
        run: |
          # Generate image tag
          IMAGE_TAG="${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID_DEV }}/toy-api:${{ github.sha }}"
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          
          # Build and push image
          docker build -t ${IMAGE_TAG} .
          docker push ${IMAGE_TAG}
          
          # Also tag as latest for convenience
          LATEST_TAG="${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID_DEV }}/toy-api:latest"
          docker tag ${IMAGE_TAG} ${LATEST_TAG}
          docker push ${LATEST_TAG}

  # Validate Terraform configurations
  terraform-validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        working-directory: ./google-cloud-toy-api/terraform/environments/${{ matrix.environment }}
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: ./google-cloud-toy-api/terraform/environments/${{ matrix.environment }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ./google-cloud-toy-api/terraform/environments/${{ matrix.environment }}
        run: terraform validate

  # Deploy to development environment
  deploy-dev:
    if: github.ref == 'refs/heads/main'
    needs: [build-image, terraform-validate]
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_DEV }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Dev
        working-directory: ./google-cloud-toy-api/terraform/environments/dev
        run: |
          terraform init
          
          # Import existing Firestore database if it exists
          terraform import module.firestore.google_firestore_database.database "projects/${{ secrets.GCP_PROJECT_ID_DEV }}/databases/(default)" 2>/dev/null || echo "Firestore database import skipped"
          
          terraform plan -var="project_id=${{ secrets.GCP_PROJECT_ID_DEV }}" -var="container_image=${{ needs.build-image.outputs.image-tag }}"
          terraform apply -auto-approve -var="project_id=${{ secrets.GCP_PROJECT_ID_DEV }}" -var="container_image=${{ needs.build-image.outputs.image-tag }}"

      - name: Get deployment outputs
        id: terraform-outputs
        working-directory: ./google-cloud-toy-api/terraform/environments/dev
        run: |
          echo "service_url=$(terraform output -raw service_url)" >> $GITHUB_OUTPUT

      - name: Run integration tests
        env:
          SERVICE_URL: ${{ steps.terraform-outputs.outputs.service_url }}
          API_KEY: ${{ secrets.DEV_API_KEY }}
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Test public endpoint
          echo "Testing public endpoint..."
          curl -f "$SERVICE_URL/public" || exit 1
          
          # Test authenticated endpoint  
          echo "Testing authenticated endpoint..."
          curl -f -H "x-api-key: $API_KEY" "$SERVICE_URL/items" || exit 1
          
          echo "âœ… Dev environment integration tests passed"

  # Deploy to staging environment
  deploy-staging:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-dev]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_STAGING }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Staging
        working-directory: ./google-cloud-toy-api/terraform/environments/staging
        run: |
          terraform init
          
          # Import existing Firestore database if it exists
          terraform import module.firestore.google_firestore_database.database "projects/${{ secrets.GCP_PROJECT_ID_STAGING }}/databases/(default)" 2>/dev/null || echo "Firestore database import skipped"
          
          # Build and push image for staging
          IMAGE_TAG="${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID_STAGING }}/toy-api:${{ github.sha }}"
          
          terraform plan -var="project_id=${{ secrets.GCP_PROJECT_ID_STAGING }}" -var="container_image=${IMAGE_TAG}"
          terraform apply -auto-approve -var="project_id=${{ secrets.GCP_PROJECT_ID_STAGING }}" -var="container_image=${IMAGE_TAG}"

  # Deploy to production environment
  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Production
        working-directory: ./google-cloud-toy-api/terraform/environments/prod
        run: |
          terraform init
          
          # Import existing Firestore database if it exists
          terraform import module.firestore.google_firestore_database.database "projects/${{ secrets.GCP_PROJECT_ID_PROD }}/databases/(default)" 2>/dev/null || echo "Firestore database import skipped"
          
          # Build and push image for production
          IMAGE_TAG="${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID_PROD }}/toy-api:${{ github.sha }}"
          
          terraform plan -var="project_id=${{ secrets.GCP_PROJECT_ID_PROD }}" -var="container_image=${IMAGE_TAG}"
          terraform apply -auto-approve -var="project_id=${{ secrets.GCP_PROJECT_ID_PROD }}" -var="container_image=${IMAGE_TAG}"

      - name: Notify deployment success
        run: |
          echo "ðŸš€ Successfully deployed to production!"
          echo "All environments updated with Cloud Run services"